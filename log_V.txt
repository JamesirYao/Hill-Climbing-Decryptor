> load "MagmaProcedures.txt";
Loading "MagmaProcedures.txt"
(Magma functions defined for use in MATH2068/2988)
> load "asst1ciphertexts.txt";
Loading "asst1ciphertexts.txt"
> CoincidenceIndex(sct1);
0.0417351973684210526315789473684
> SortedFreqDist(sct1);
[ <0.0682261204347014427185058593750, "V">, <0.0662768026813864707946777343750, 
"G">, <0.0604288498871028423309326171875, "A">, 
<0.0526315788738429546356201171875, "E">, <0.0526315788738429546356201171875, 
"R">, <0.0506822611205279827117919921875, "K">, 
<0.0506822611205279827117919921875, "S">, <0.0448343078605830669403076171875, 
"C">, <0.0428849901072680950164794921875, "W">, 
<0.0409356723539531230926513671875, "J">, <0.0409356723539531230926513671875, 
"N">, <0.0389863546006381511688232421875, "I">, 
<0.0389863546006381511688232421875, "L">, <0.0370370368473231792449951171875, 
"H">, <0.0350877190940082073211669921875, "O">, 
<0.0350877190940082073211669921875, "Y">, <0.0311890838202089071273803710938, 
"U">, <0.0292397660668939352035522460938, "P">, 
<0.0292397660668939352035522460938, "T">, <0.0272904483135789632797241210938, 
"Q">, <0.0233918128069490194320678710938, "D">, 
<0.0233918128069490194320678710938, "M">, <0.0233918128069490194320678710938, 
"X">, <0.0214424950536340475082397460938, "F">, 
<0.0194931773003190755844116210938, "Z">, <0.0155945419101044535636901855469, 
"B"> ]
> CoincidenceIndex(sct2);
0.0621177837573385518590998043053
> SortedFreqDist(sct2);
[ <0.119140625000000000000000000000, "I">, <0.0820312500000000000000000000000, 
"O">, <0.0800781250000000000000000000000, "U">, 
<0.0742187500000000000000000000000, "H">, <0.0742187500000000000000000000000, 
"P">, <0.0703125000000000000000000000000, "G">, 
<0.0683593750000000000000000000000, "T">, <0.0625000000000000000000000000000, 
"K">, <0.0488281250000000000000000000000, "Q">, 
<0.0429687500000000000000000000000, "A">, <0.0410156250000000000000000000000, 
"Z">, <0.0390625000000000000000000000000, "R">, 
<0.0332031250000000000000000000000, "B">, <0.0332031250000000000000000000000, 
"L">, <0.0253906250000000000000000000000, "C">, 
<0.0253906250000000000000000000000, "D">, <0.0195312500000000000000000000000, 
"F">, <0.0175781250000000000000000000000, "Y">, 
<0.0136718750000000000000000000000, "W">, <0.0117187500000000000000000000000, 
"S">, <0.00976562500000000000000000000000, "J">, 
<0.00390625000000000000000000000000, "M">, <0.00390625000000000000000000000000, 
"N">, <0.000000000000000000000000000000, "E">, 
<0.000000000000000000000000000000, "V">, <0.000000000000000000000000000000, "X">
]
> CoincidenceIndex(sct3);
0.0725775376827471572664425220052
> SortedFreqDist(sct3);
[ <0.139805825427174568176269531250, "S">, <0.106796116568148136138916015625, 
"Q">, <0.0893203886225819587707519531250, "X">, 
<0.0873786406591534614562988281250, "K">, <0.0854368936270475387573242187500, 
"V">, <0.0737864077091217041015625000000, "E">, 
<0.0601941747590899467468261718750, "W">, <0.0563106797635555267333984375000, 
"O">, <0.0504854368045926094055175781250, "M">, 
<0.0349514563567936420440673828125, "G">, <0.0310679611284285783767700195312, 
"L">, <0.0291262136306613683700561523438, "N">, 
<0.0233009709045290946960449218750, "P">, <0.0213592234067618846893310546875, 
"J">, <0.0213592234067618846893310546875, "R">, 
<0.0194174756761640310287475585938, "F">, <0.0155339805642142891883850097656, 
"B">, <0.0155339805642142891883850097656, "I">, 
<0.0116504854522645473480224609375, "A">, <0.0116504854522645473480224609375, 
"T">, <0.00970873783808201551437377929688, "H">, 
<0.00194174757052678614854812622070, "D">, <0.00194174757052678614854812622070, 
"U">, <0.00194174757052678614854812622070, "Z">, 
<0.000000000000000000000000000000, "C">, <0.000000000000000000000000000000, "Y">
]
> //scr1 was enciphered using a Vigenere cipher
> //sct3 and sct2 were enciphered using simple substitution ciphers
> replace:=procedure(~key,i,c);
procedure>     sk:=[String(key)[i]: i in [1..#String(key)]];
procedure>     sk[i]:=c;
procedure>     key:=Parent(key)!&cat[sk[i]:i in [1..#String(key)]];
procedure> end procedure;
> //find a best replace
> //(original key, cipher text, Crypt)
> //return (new key)
> bestReplace:=function(key, ct, C)
function>     maxScore:=Score(Enciphering(InverseKey(key), ct), Common);
function>     maxKey:=Encoding(C, "ABCDEFGHIJKLMNOPQRSTUFWXYZ");
function>     for i:=1 to #String(key) do
function|for>         for j:=1 to 26 do
function|for|for>                   key2:=key;
function|for|for>             replace(~key2,i,alphabet[j]);
function|for|for>             newScore:=Score(Enciphering(InverseKey(key2), ct\
), Common);
function|for|for>             if (newScore gt maxScore) then
function|for|for|if>                 maxScore:=newScore;
function|for|for|if>                 maxKey:=key2;
function|for|for|if>             end if;
function|for|for>         end for;
function|for>     end for;
function>     if (String(maxKey) ne "ABCDEFGHIJKLMNOPQRSTUFWXYZ") then
function|if>         maxScore, maxKey;
function|if>     else
function|if>         maxScore, "Finished!";
function|if>     end if;
function>     return maxKey;
function> end function;
> 
> //find a best key by hill-climbing algorithm
> //(original key, cipher text, Crypt)
> //return (new key)
> keyByHillClimbing:=function(key, ct, C)
function>     key2:=key;
function>     key3:="";
function>     while (String(key2) ne "ABCDEFGHIJKLMNOPQRSTUFWXYZ") do
function|while>         key3:=key2;
function|while>         key2:=bestReplace(key3, ct, C);
function|while>     end while;
function>     return key3;
function> end function;
> 
> for i:=2 to 20 do
for>     print "Period:",i,"CI:",CoincidenceIndex(Decimation(sct1,1,i));
for> end for;
Period: 2 CI: 0.0425857843137254901960784313726
Period: 3 CI: 0.0416236670106639146886824905401
Period: 4 CI: 0.0505659448818897637795275590551
Period: 5 CI: 0.0394098233352747039409823335275
Period: 6 CI: 0.0400560224089635854341736694678
Period: 7 CI: 0.0410958904109589041095890410959
Period: 8 CI: 0.0620039682539682539682539682540
Period: 9 CI: 0.0401002506265664160401002506266
Period: 10 CI: 0.0415686274509803921568627450980
Period: 11 CI: 0.0454106280193236714975845410628
Period: 12 CI: 0.0545876887340301974448315911731
Period: 13 CI: 0.0337381916329284750337381916329
Period: 14 CI: 0.0476190476190476190476190476190
Period: 15 CI: 0.0409982174688057040998217468806
Period: 16 CI: 0.0564516129032258064516129032258
Period: 17 CI: 0.0367816091954022988505747126437
Period: 18 CI: 0.0396825396825396825396825396825
Period: 19 CI: 0.0484330484330484330484330484330
Period: 20 CI: 0.0600000000000000000000000000000
> //Preiod 8 is the best one.
> SortedFreqDist(Decimation(sct1,1,8));
[ <0.125000000000000000000000000000, "G">, <0.109375000000000000000000000000, 
"L">, <0.0937500000000000000000000000000, "E">, 
<0.0937500000000000000000000000000, "J">, <0.0781250000000000000000000000000, 
"S">, <0.0781250000000000000000000000000, "W">, 
<0.0625000000000000000000000000000, "D">, <0.0625000000000000000000000000000, 
"F">, <0.0625000000000000000000000000000, "X">, 
<0.0468750000000000000000000000000, "A">, <0.0312500000000000000000000000000, 
"K">, <0.0312500000000000000000000000000, "M">, 
<0.0312500000000000000000000000000, "U">, <0.0312500000000000000000000000000, 
"V">, <0.0312500000000000000000000000000, "Z">, 
<0.0156250000000000000000000000000, "N">, <0.0156250000000000000000000000000, 
"T">, <0.000000000000000000000000000000, "B">, 
<0.000000000000000000000000000000, "C">, <0.000000000000000000000000000000, 
"H">, <0.000000000000000000000000000000, "I">, 
<0.000000000000000000000000000000, "O">, <0.000000000000000000000000000000, 
"P">, <0.000000000000000000000000000000, "Q">, 
<0.000000000000000000000000000000, "R">, <0.000000000000000000000000000000, "Y">
]
> C:=VigenereCryptosystem(8);
> k1:=C!"ABCDEFGH";
> for i:=1 to 8 do
for>     t:=SortedFreqDist(Decimation(sct1,i,8))[1];
for>     replace(~k1, i, alphabet[(Index(alphabet, t[2])+21) mod 26 +1]);
for> end for;
> k1;
CYHSIWRU
> ct1:=Encoding(C,sct1);
> Enciphering(InverseKey(k1),ct1);
YEMXDVGUHCMSZVWEVEMSZVCDCEJSNXPDUVAPEMPYDJOVIREYERVICVEQRPEEJZXQBENHIZYUHELMGEZ\
MJLEOEERIEJERCCLDTENHEHFEJITLAWTWXXSLEJEEHMCEHWCECQAVWKSEDXOAWKPHBSOMJFCTUVCEPV\
REHMCEHZXLUVYAACWQSUUEEEEUTXOSSZEXCETXAIDCQXHIIREYSELMQEOUHWTEJUPGKETMKEDREXHXD\
VDYCTLIWEOGKEDVWKTSQPAFKLERYROQERWJXIOVADTCJIEQEERMYXHEHFEEDIWWSZEXCENCYYPUHJUP\
BRNJIEBSQKEXUWQYWIPEVXHIDPAEJINYOVTCLIRCCFZTQXIRPVRHQPARZUTVVIRIJKTQBGAPYLWKIMK\
RKNEXUWCMAEEYVMCRWDPIEJBIEERIQRIQWCNKBSUWEEDXEVTMJDLJJIRWRVRUJEBPARYYCELEJUXYDI\
REHZLCJLEZAIJCEHEPKWLCEHEVJDLZEVGIJVCQB
> k1:=keyByHillClimbing(k1, ct1, C);
94 CYHWIWRU
152 CCHWIWRU
202 CCHWEWRU
308 CCHWENRU
480 CCHWENCU
632 SCHWENCU
1282 SCHWENCK
1282 Finished!
> Enciphering(InverseKey(k1),ct1);
IAMTHEVERYMODELOFAMODERNMAJORGENERALIVEINFORMATIONVEGETABLEANIMALANDMINERALIKNO\
WTHEKINGSOFENGLANDANDIQUOTETHEFIGHTSHISTORICALFROMMARATHONTOWATERLOOINORDERCATE\
GORICALIMVERYWELLACQUAINTEDTOOWITHMATTERSMATHEMATICALIUNDERSTANDEQUATIONSBOTHTH\
ESIMPLEANDQUADRATICALABOUTBINOMIALTHEOREMIMTEEMINGWITHALOTONEWSWITHMANYCHEERFUL\
FACTSABOUTTHESQUAREOFTHEHYPOTENUSEIMVERYGOODATINTEGRALANDDIFFERENTIALCALCULUSIK\
NOWTHESCIENTIFICNAMESOFBEINGSANIMALCULOUSINSHORTINMATTERSVEGETABLEANIMALANDMINE\
RALIAMTHEVERYMODELOFAMODERNMAJORGENERAL
> //I AM THE VERY MODEL OF A MODERN MAJOR GENERAL....
> //Got it!
> exit;

Total time: 10.609 seconds, Total memory usage: 32.09MB
