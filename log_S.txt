> load "MagmaProcedures.txt";
Loading "MagmaProcedures.txt"
(Magma functions defined for use in MATH2068/2988)
> load "asst1ciphertexts.txt";
Loading "asst1ciphertexts.txt"
> C:=SubstitutionCryptosystem();
> //find a best swap
> //(original key, cipher text)
> //return (new key)
> bestSwap:=function(key, ct)
function>     maxScore:=Score(Enciphering(InverseKey(key), ct), Common);
function>     maxKey:=Encoding(C, "ABCDEFGHIJKLMNOPQRSTUFWXYZ");
function>     for i:=1 to 25 do
function|for>         for j:=i+1 to 26 do
function|for|for>                   key2:=key;
function|for|for>             swap(alphabet[i], alphabet[j], ~key2);
function|for|for>             newScore:=Score(Enciphering(InverseKey(key2), ct\
), Common);
function|for|for>             if (newScore gt maxScore) then
function|for|for|if>                 maxScore:=newScore;
function|for|for|if>                 maxKey:=key2;
function|for|for|if>             end if;
function|for|for>         end for;
function|for>     end for;
function>     if (String(maxKey) ne "ABCDEFGHIJKLMNOPQRSTUFWXYZ") then
function|if>         maxKey, maxScore;
function|if>     else
function|if>         "Finished!", maxScore;
function|if>     end if;
function>     return maxKey;
function> end function;
> 
> //find a best key by hill-climbing algorithm
> //(original key, cipher text)
> //return (new key)
> keyByHillClimbing:=function(key, ct)
function>     key2:=key;
function>     key3:="";
function>     while (String(key2) ne "ABCDEFGHIJKLMNOPQRSTUFWXYZ") do
function|while>         key3:=key2;
function|while>         key2:=bestSwap(key3, ct);
function|while>     end while;
function>     return key3;
function> end function;
> 
> SortedFreqDist(sct1);
[ <0.0682261204347014427185058593750, "V">, <0.0662768026813864707946777343750, 
"G">, <0.0604288498871028423309326171875, "A">, 
<0.0526315788738429546356201171875, "E">, <0.0526315788738429546356201171875, 
"R">, <0.0506822611205279827117919921875, "K">, 
<0.0506822611205279827117919921875, "S">, <0.0448343078605830669403076171875, 
"C">, <0.0428849901072680950164794921875, "W">, 
<0.0409356723539531230926513671875, "J">, <0.0409356723539531230926513671875, 
"N">, <0.0389863546006381511688232421875, "I">, 
<0.0389863546006381511688232421875, "L">, <0.0370370368473231792449951171875, 
"H">, <0.0350877190940082073211669921875, "O">, 
<0.0350877190940082073211669921875, "Y">, <0.0311890838202089071273803710938, 
"U">, <0.0292397660668939352035522460938, "P">, 
<0.0292397660668939352035522460938, "T">, <0.0272904483135789632797241210938, 
"Q">, <0.0233918128069490194320678710938, "D">, 
<0.0233918128069490194320678710938, "M">, <0.0233918128069490194320678710938, 
"X">, <0.0214424950536340475082397460938, "F">, 
<0.0194931773003190755844116210938, "Z">, <0.0155945419101044535636901855469, 
"B"> ]
> SortedFreqDist(sct2);
[ <0.119140625000000000000000000000, "I">, <0.0820312500000000000000000000000, 
"O">, <0.0800781250000000000000000000000, "U">, 
<0.0742187500000000000000000000000, "H">, <0.0742187500000000000000000000000, 
"P">, <0.0703125000000000000000000000000, "G">, 
<0.0683593750000000000000000000000, "T">, <0.0625000000000000000000000000000, 
"K">, <0.0488281250000000000000000000000, "Q">, 
<0.0429687500000000000000000000000, "A">, <0.0410156250000000000000000000000, 
"Z">, <0.0390625000000000000000000000000, "R">, 
<0.0332031250000000000000000000000, "B">, <0.0332031250000000000000000000000, 
"L">, <0.0253906250000000000000000000000, "C">, 
<0.0253906250000000000000000000000, "D">, <0.0195312500000000000000000000000, 
"F">, <0.0175781250000000000000000000000, "Y">, 
<0.0136718750000000000000000000000, "W">, <0.0117187500000000000000000000000, 
"S">, <0.00976562500000000000000000000000, "J">, 
<0.00390625000000000000000000000000, "M">, <0.00390625000000000000000000000000, 
"N">, <0.000000000000000000000000000000, "E">, 
<0.000000000000000000000000000000, "V">, <0.000000000000000000000000000000, "X">
]
> SortedFreqDist(sct3);
[ <0.139805825427174568176269531250, "S">, <0.106796116568148136138916015625, 
"Q">, <0.0893203886225819587707519531250, "X">, 
<0.0873786406591534614562988281250, "K">, <0.0854368936270475387573242187500, 
"V">, <0.0737864077091217041015625000000, "E">, 
<0.0601941747590899467468261718750, "W">, <0.0563106797635555267333984375000, 
"O">, <0.0504854368045926094055175781250, "M">, 
<0.0349514563567936420440673828125, "G">, <0.0310679611284285783767700195312, 
"L">, <0.0291262136306613683700561523438, "N">, 
<0.0233009709045290946960449218750, "P">, <0.0213592234067618846893310546875, 
"J">, <0.0213592234067618846893310546875, "R">, 
<0.0194174756761640310287475585938, "F">, <0.0155339805642142891883850097656, 
"B">, <0.0155339805642142891883850097656, "I">, 
<0.0116504854522645473480224609375, "A">, <0.0116504854522645473480224609375, 
"T">, <0.00970873783808201551437377929688, "H">, 
<0.00194174757052678614854812622070, "D">, <0.00194174757052678614854812622070, 
"U">, <0.00194174757052678614854812622070, "Z">, 
<0.000000000000000000000000000000, "C">, <0.000000000000000000000000000000, "Y">
]
> //scr1 was enciphered using a Vigenere cipher
> //sct3 and sct2 were enciphered using simple substitution ciphers
> ct2:=Encoding(C, sct2);
> str2:=String(ct2);
> str2;
TLHQIHQIUPDULGACYIPKRUAZBYIICFZUDIBLUPOGDFPORHTROZOGBUYJTUAKZDQUGUAPOYZIFAPFUKI\
TLTHRUAZBYIHAPGIBBTPIRHZDHUHQILAPHQIPOGRIULQACOGQOFFTGIKKUPHQIPIZTILULQACOGKALL\
IPTGWHQIGKAPIZDGITHQIPWOAKKGUPOGDUHQIPCOHQICOHTRTOGSUAZBQOJIYIIGKULUUZTKQOKHUBI\
RPDUPPIWPIHKARQOFFZTROHTUGKYAHKRTIGRISUPMKLUPIJTZOKSIZZOKLUPWUUBOGBFOPHTRAZOPZD\
ULRUAPKITGHTCIULSOPOGBYUHQWOAKKOGBZIKKIPCOHQICOHTRTOGKCODYINAKHTLTIBTGPINUTRTGW\
HQOHHQIPITKUGIKRTIGRIOHOGDPOHIOGBHQOHHQITPUSGSQUKIJIPDPICUHIGIKKLPUCUPBTGOPDQAC\
OGORHTJTHTIKKQUAZBMIIFTHWIGHZIOGBRZIOG
> for i:=1 to #sct2-2 do
for>     if sct2[i] eq "O" and sct2[i+2] eq "I" then
for|if>         print sct2[i..i+2];
for|if>     end if;
for> end for;
OJI
OHI
> for i:=1 to #sct2-2 do
for>     if sct2[i] eq "U" and sct2[i+2] eq "I" then
for|if>         print sct2[i..i+2];
for|if>     end if;
for> end for;
UDI
UKI
UBI
UPI
UGI
UKI
UHI
> for i:=1 to #sct2-2 do
for>     if sct2[i] eq "H" and sct2[i+2] eq "I" then
for|if>         print sct2[i..i+2];
for|if>     end if;
for> end for;
HQI
HQI
HQI
HQI
HQI
HQI
HQI
HQI
HQI
HQI
HQI
HQI
HTI
HWI
HZI
> fk2:=C!freqkey(ct2);
> fk2;
DCWFXGNOEVHMKJTIRUBSAQPZYL
> swap("X","I",~fk2);
> swap("O","Q",~fk2);
> swap("S","H",~fk2);
> fk2;
DCWFIGNQEVSMKJTXRUBHAOPZYL
> fk2i:=InverseKey(fk2);
> pt2:=Enciphering(fk2i, ct2);
> Score(pt2, Common);
202
> fk2:=keyByHillClimbing(fk2, ct2);
DCWFIGNQOVSMKJTXRUBHAEPZYL
298
DCWFIGNQOVSMPJTXRUBHAEKZYL
348
LCWFIGNQOVSMPJTXRUBHAEKZYD
374
LCWFIJNQOVSMPGTXRUBHAEKZYD
394
LCWFIJBQOVSMPGTXRUNHAEKZYD
418
LCWFIJBQOVSMUGTXRPNHAEKZYD
446
LCWFIJBQOVSMUGTXNPRHAEKZYD
480
UCWFIJBQOVSMLGTXNPRHAEKZYD
510
TCWFIJBQOVSMLGUXNPRHAEKZYD
560
TCWFIJBQOVSMLGUXNPKHAERZYD
614
TCWFIJBQOVSZLGUXNPKHAERMYD
670
TCRFIJBQOVSZLGUXNPKHAEWMYD
702
OCRFIJBQTVSZLGUXNPKHAEWMYD
808
OCRXIJBQTVSZLGUFNPKHAEWMYD
1314
OCRBIJXQTVSZLGUFNPKHAEWMYD
1454
OCRBIJWQTVSZLGUFNPKHAEXMYD
1494
OCRBIJWQTVXZLGUFNPKHAESMYD
1548
OYRBIJWQTVXZLGUFNPKHAESMCD
1574
OYRBIJWQTVXZCGUFNPKHAESMLD
1634
OYRBILWQTVXZCGUFNPKHAESMJD
1668
OYRBILWQTVMZCGUFNPKHAESXJD
1684
OYRBILWQTVMZCGUFNPKHAESXDJ
1698
OYRBILWQTVMZCGUFNPKHAJSXDE
1738
OYRBILWQTNMZCGUFVPKHAJSXDE
1746
Finished! 1746
> Enciphering(InverseKey(fk2), ct2);
IFTHETHEORYOFNUMBERSCOULDBEEMPLOYEDFORANYPRACTICALANDOBVIOUSLYHONOURABLEPURPOSE\
IFITCOULDBETURNEDDIRECTLYTOTHEFURTHERANCEOFHUMANHAPPINESSORTHERELIEFOFHUMANSUFF\
ERINGTHENSURELYNEITHERGAUSSNORANYOTHERMATHEMATICIANWOULDHAVEBEENSOFOOLISHASTODE\
CRYORREGRETSUCHAPPLICATIONSBUTSCIENCEWORKSFOREVILASWELLASFORGOODANDPARTICULARLY\
OFCOURSEINTIMEOFWARANDBOTHGAUSSANDLESSERMATHEMATICIANSMAYBEJUSTIFIEDINREJOICING\
THATTHEREISONESCIENCEATANYRATEANDTHATTHEIROWNWHOSEVERYREMOTENESSFROMORDINARYHUM\
ANACTIVITIESSHOULDKEEPITGENTLEANDCLEAN
> //If the thoery of numbers could be employed for any pratical and ...
> //Got it!!!
> //output key for text 2
> fk2;
OYRBILWQTNMZCGUFVPKHAJSXDE
> ct3:=Encoding(C, sct3);
> str3:=String(ct3);
> SortedFreqDist(sct3);
[ <0.139805825427174568176269531250, "S">, <0.106796116568148136138916015625, 
"Q">, <0.0893203886225819587707519531250, "X">, 
<0.0873786406591534614562988281250, "K">, <0.0854368936270475387573242187500, 
"V">, <0.0737864077091217041015625000000, "E">, 
<0.0601941747590899467468261718750, "W">, <0.0563106797635555267333984375000, 
"O">, <0.0504854368045926094055175781250, "M">, 
<0.0349514563567936420440673828125, "G">, <0.0310679611284285783767700195312, 
"L">, <0.0291262136306613683700561523438, "N">, 
<0.0233009709045290946960449218750, "P">, <0.0213592234067618846893310546875, 
"J">, <0.0213592234067618846893310546875, "R">, 
<0.0194174756761640310287475585938, "F">, <0.0155339805642142891883850097656, 
"B">, <0.0155339805642142891883850097656, "I">, 
<0.0116504854522645473480224609375, "A">, <0.0116504854522645473480224609375, 
"T">, <0.00970873783808201551437377929688, "H">, 
<0.00194174757052678614854812622070, "D">, <0.00194174757052678614854812622070, 
"U">, <0.00194174757052678614854812622070, "Z">, 
<0.000000000000000000000000000000, "C">, <0.000000000000000000000000000000, "Y">
]
> for i:=1 to #str3-2 do
for>     if str3[i] eq "Q" and str3[i+2] eq "S" then
for|if>         print str3[i..i+2];
for|if>     end if;
for> end for;
QOS
QOS
QOS
QOS
QOS
QOS
QOS
QOS
QOS
QSS
QOS
QOS
QOS
QOS
> fk3:=C!freqkey(str3);
> swap("B","Q",~fk3);
> swap("V","O",~fk3);
> swap("N","S",~fk3);
> fk3;
PGBKSFDOYMVLRUHCTWEQJINAZX
> //Q->T O->H S->E
> fk3:=keyByHillClimbing(fk3, ct3);
MGBKSFDOYPVLRUHCTWEQJINAZX
284
MGBKSFDOYPVLRUHCIWEQJTNAZX
356
MGBKSFDOYPVLRXHCIWEQJTNAZU
460
MGBKSFDOYPHLRXVCIWEQJTNAZU
540
MGBKSDFOYPHLRXVCIWEQJTNAZU
684
MGBNSDFOYPHLRXVCIWEQJTKAZU
790
MGJNSDFOYPHLRXVCIWEQBTKAZU
862
MGRNSDFOYPHLJXVCIWEQBTKAZU
926
MYRNSDFOGPHLJXVCIWEQBTKAZU
978
MYRNSDFOGPHLJXVCZWEQBTKAIU
1002
MYRNSZFOGPHLJXVCDWEQBTKAIU
1018
MYRNSPFOGZHLJXVCDWEQBTKAIU
1032
MYRNSPFOGZJLHXVCDWEQBTKAIU
1042
MARNSPFOGZJLHXVCDWEQBTKYIU
1044
Finished! 1044
> Enciphering(InverseKey(fk3), ct3);
THEONCENOWUSGRMENJAGONRWMONSIRSHASLATELYBUMLOSHEDNEKBRONFOBLESWICUNNERYKHEREONH\
EDETERGONESTHEIWRFEWICUNBWKDERANDONVESTOCATESTHEDOIIERENFEWITHERESOSTONCBWKERWI\
THEAORTWSKOITANDSLWKGWTOWNSANDSHEKSMYSEVERALEZBEROGENTSTHATOTSRESOSTANFETWSKOIT\
GWTOWNSOSVASTLYCREATERTHANAFFWRDONCTWTHEIWRECWONCDWFTRONEKHOFHHESAYSHWLDSTRUEWN\
LYONSLWKGWTOWNSANDTHATOITHEMULLETHASTHEVELWFOTYCOVENTWOTEQUALTWTHEGWTOWNWISEVEN\
TEENHUNDREDIEETONWNESEFWNDWITOGETHERESOSTANFEWITHEAOROSCREATERTHANONTHEDWFTRONE\
WISLWKGWTOWNSNEARLYONTHERATOWWITHREETWWNE
> //Still need some swaps
> //Help it jump out of the local optimum
> //Use word "THAT" ("QO?Q")
> for i:=1 to #str3-3 do
for>     if  str3[i] eq "Q" and str3[i+1] eq "O" and str3[i+3] eq "Q" then
for|if>         print str3[i..i+3];
for|if>     end if;
for> end for;
QOMQ
QOMQ
> //A is correct
> 
> //Use word "HERE" or part of "WHERE" "THERE" ("OS?S")
> for i:=1 to #str3-3 do
for>     if  str3[i] eq "O" and str3[i+1] eq "S" and str3[i+3] eq "S" then
for|if>         print str3[i..i+3];
for|if>     end if;
for> end for;
OSWS
OSNS
OSWS
OSTS
OSWS
> //W->R is correct;
> 
> //Use word "WHERE" (?OSWS)
> for i:=1 to #str3-4 do
for>     if  str3[i+1] eq "O" and str3[i+2] eq "S" and str3[i+3] eq "W" and st\
r3[i+4] eq "S" then
for|if>         print str3[i..i+4];
for|if>     end if;
for> end for; 
JOSWS
QOSWS
QOSWS
> //Guess J->W
> swap("J","K",~fk3);
> fk3;
MARNSPFOGZKLHXVCDWEQBTJYIU
> Enciphering(InverseKey(fk3), ct3);
THEONCENOKUSGRMENJAGONRKMONSIRSHASLATELYBUMLOSHEDNEWBRONFOBLESKICUNNERYWHEREONH\
EDETERGONESTHEIKRFEKICUNBKWDERANDONVESTOCATESTHEDOIIERENFEKITHERESOSTONCBKWERKI\
THEAORTKSWOITANDSLKWGKTOKNSANDSHEWSMYSEVERALEZBEROGENTSTHATOTSRESOSTANFETKSWOIT\
GKTOKNSOSVASTLYCREATERTHANAFFKRDONCTKTHEIKRECKONCDKFTRONEWHOFHHESAYSHKLDSTRUEKN\
LYONSLKWGKTOKNSANDTHATOITHEMULLETHASTHEVELKFOTYCOVENTKOTEQUALTKTHEGKTOKNKISEVEN\
TEENHUNDREDIEETONKNESEFKNDKITOGETHERESOSTANFEKITHEAOROSCREATERTHANONTHEDKFTRONE\
KISLKWGKTOKNSNEARLYONTHERATOKKITHREETKKNE
> 
> //Use word "WHICH" (JO??O)
> for i:=1 to #str3-4 do
for>     if  str3[i] eq "J" and str3[i+1] eq "O" and str3[i+4] eq "O" then
for|if>         print str3[i..i+4];
for|if>     end if;
for> end for; 
JOVPO
> //Guess V->I and P->C
> swap("G","V",~fk3);
> swap("P","R",~fk3);
> fk3;
MAPNSRFOVZKLHXGCDWEQBTJYIU
> Enciphering(InverseKey(fk3), ct3);
THEINFENIKUSGRMENJAGINRKMINSORSHASLATELYBUMLISHEDNEWBRINCIBLESKOFUNNERYWHEREINH\
EDETERGINESTHEOKRCEKOFUNBKWDERANDINVESTIFATESTHEDIOOERENCEKOTHERESISTINFBKWERKO\
THEAIRTKSWIOTANDSLKWGKTIKNSANDSHEWSMYSEVERALEZBERIGENTSTHATITSRESISTANCETKSWIOT\
GKTIKNSISVASTLYFREATERTHANACCKRDINFTKTHEOKREFKINFDKCTRINEWHICHHESAYSHKLDSTRUEKN\
LYINSLKWGKTIKNSANDTHATIOTHEMULLETHASTHEVELKCITYFIVENTKITEQUALTKTHEGKTIKNKOSEVEN\
TEENHUNDREDOEETINKNESECKNDKOTIGETHERESISTANCEKOTHEAIRISFREATERTHANINTHEDKCTRINE\
KOSLKWGKTIKNSNEARLYINTHERATIKKOTHREETKKNE
> //Use hill-climbing once again
> fk3:=keyByHillClimbing(fk3, ct3);
MAPNSRHOVZKLFXGCDWEQBTJYIU
1026
MAPNSRHOVZGLFXKCDWEQBTJYIU
1348
MAPNSGHOVZRLFXKCDWEQBTJYIU
1416
MAPNSGROVZHLFXKCDWEQBTJYIU
1486
MCPNSGROVZHLFXKADWEQBTJYIU
1500
MCPNSGROVZHLFXKADWEQBTJUIY
2012
Finished! 2012
> Enciphering(InverseKey(fk3), ct3);
THEINGENIOUSMRKENJAMINROKINSFRSHASLATELYPUKLISHEDNEWPRINCIPLESOFGUNNERYWHEREINH\
EDETERMINESTHEFORCEOFGUNPOWDERANDINVESTIGATESTHEDIFFERENCEOFTHERESISTINGPOWEROF\
THEAIRTOSWIFTANDSLOWMOTIONSANDSHEWSKYSEVERALEXPERIMENTSTHATITSRESISTANCETOSWIFT\
MOTIONSISVASTLYGREATERTHANACCORDINGTOTHEFOREGOINGDOCTRINEWHICHHESAYSHOLDSTRUEON\
LYINSLOWMOTIONSANDTHATIFTHEKULLETHASTHEVELOCITYGIVENTOITEQUALTOTHEMOTIONOFSEVEN\
TEENHUNDREDFEETINONESECONDOFTIMETHERESISTANCEOFTHEAIRISGREATERTHANINTHEDOCTRINE\
OFSLOWMOTIONSNEARLYINTHERATIOOFTHREETOONE
> //The ingenious MR. Benjamin Robins F.R.S. has lately published new principl\
es...
> //Got it!!!
> //output key for text 3
> fk3;
MCPNSGROVZHLFXKADWEQBTJUIY
